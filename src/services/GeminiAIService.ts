/**
 * GeminiAIService.ts
 * 
 * M·ª•c ƒë√≠ch: X·ª≠ l√Ω AI t·ª´ OCR text ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin giao d·ªãch
 * 
 * Flow: OCR Text ‚Üí Gemini API ‚Üí Structured Transaction Data
 */

export interface BillData {
  items?: Array<{
    name: string;
    amount: number;
    category?: string;
    quantity?: number;
    unitPrice?: number;
  }>;
  storeName?: string;
  storeAddress?: string;
  totalAmount?: number;
  tax?: number;
  currency?: string;
  date?: string;
  time?: string;
  note?: string;
  confidence?: number;
  rawText?: string;
}

interface ParsedItem {
  name: string;
  amount: number;
  category?: string;
  quantity?: number;
  unitPrice?: number;
}

export const GeminiAIService = {
  /**
   * Ph√¢n t√≠ch OCR text ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin giao d·ªãch
   * @param ocrText - Text t·ª´ OCR
   * @returns BillData
   */
  parseReceiptText: (ocrText: string): BillData => {
    console.log('ü§ñ [GEMINI] Starting to parse OCR text...');
    
    if (!ocrText || ocrText.trim().length === 0) {
      console.warn('‚ö†Ô∏è [GEMINI] Empty OCR text');
      return {
        items: [],
        totalAmount: 0,
        currency: 'VND',
        confidence: 0,
        rawText: ocrText,
      };
    }

    try {
      const result = GeminiAIService._extractBillData(ocrText);
      console.log('‚úÖ [GEMINI] Parse completed successfully');
      console.log('üìä [GEMINI] Extracted items:', result.items?.length || 0);
      console.log('üí∞ [GEMINI] Total amount:', result.totalAmount);
      return result;
    } catch (error) {
      console.error('‚ùå [GEMINI] Parse error:', error);
      return {
        items: [],
        totalAmount: 0,
        currency: 'VND',
        confidence: 0,
        rawText: ocrText,
      };
    }
  },

  /**
   * Internal method ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu h√≥a ƒë∆°n t·ª´ text
   */
  _extractBillData: (text: string): BillData => {
    const lines = text.split('\n').map(line => line.trim()).filter(l => l);
    
    const result: BillData = {
      items: [],
      storeName: undefined,
      storeAddress: undefined,
      totalAmount: 0,
      tax: 0,
      currency: 'VND',
      date: new Date().toISOString().split('T')[0],
      confidence: 0,
      rawText: text,
    };

    let totalAmount = 0;
    const items: ParsedItem[] = [];

    // Duy·ªát qua t·ª´ng d√≤ng
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const nextLine = i + 1 < lines.length ? lines[i + 1] : '';

      // T√¨m t√™n c·ª≠a h√†ng (th∆∞·ªùng d√≤ng ƒë·∫ßu, vi·∫øt hoa, d√†i)
      if (i === 0 && line.length > 10) {
        result.storeName = GeminiAIService._cleanStoreName(line);
      }
      
      // T√¨m ƒë·ªãa ch·ªâ (ch·ª©a t·ª´ kh√≥a ƒë·ªãa ch·ªâ)
      if (GeminiAIService._isAddressLine(line) && !result.storeAddress) {
        result.storeAddress = line;
      }

      // T√¨m ng√†y (ƒë·ªãnh d·∫°ng: DD/MM/YYYY ho·∫∑c DD-MM-YYYY)
      const dateMatch = GeminiAIService._extractDate(line);
      if (dateMatch && !result.date) {
        result.date = dateMatch;
      }

      // T√¨m gi·ªù (ƒë·ªãnh d·∫°ng: HH:MM)
      const timeMatch = line.match(/(\d{1,2}):(\d{2})(?::(\d{2}))?/);
      if (timeMatch && !result.time) {
        result.time = timeMatch[0];
      }

      // T√¨m c√°c m·ª•c (d√≤ng ch·ª©a s·ªë ti·ªÅn)
      const itemMatch = GeminiAIService._parseItemLine(line, nextLine);
      if (itemMatch) {
        items.push(itemMatch);
        totalAmount += itemMatch.amount;
      }

      // T√¨m "TOTAL" ho·∫∑c "T·ªîNG"
      if (/^(TOTAL|T·ªîNG|THANH\s*TO√ÅN)/i.test(line)) {
        const amountMatch = line.match(/(\d+(?:[.,]\d{3})*|\d+)/);
        if (amountMatch) {
          const parsedAmount = parseInt(amountMatch[1].replace(/[.,]/g, ''), 10);
          if (parsedAmount > 0) {
            totalAmount = parsedAmount;
          }
        }
      }

      // T√¨m VAT/Thu·∫ø
      if (/VAT|TAX|THU·∫æ/i.test(line)) {
        const taxMatch = line.match(/(\d+(?:[.,]\d{3})*|\d+)/);
        if (taxMatch) {
          result.tax = parseInt(taxMatch[1].replace(/[.,]/g, ''), 10);
        }
      }
    }

    // G√°n k·∫øt qu·∫£
    result.items = items;
    result.totalAmount = totalAmount || 0;

    // T√≠nh confidence d·ª±a tr√™n s·ªë m·ª•c t√¨m th·∫•y
    const itemsFound = items.length;
    const hasStore = !!result.storeName;
    const hasDate = !!result.date;
    const hasTotal = result.totalAmount > 0;

    let confidence = 0;
    if (itemsFound > 0) confidence += 0.3;
    if (hasStore) confidence += 0.2;
    if (hasDate) confidence += 0.2;
    if (hasTotal) confidence += 0.3;

    result.confidence = Math.min(confidence, 1);

    return result;
  },

  /**
   * Parse m·ªôt d√≤ng c√≥ ch·ª©a th√¥ng tin m·ª•c
   * Format: "T√™n m·ª•c      S·ªë l∆∞·ª£ng x Gi√°    T·ªïng"
   *         "C∆°m t·∫•m      1 x 45.000    45.000"
   */
  _parseItemLine: (line: string, _nextLine: string): ParsedItem | null => {
    // Lo·∫°i b·ªè d√≤ng qu√° ng·∫Øn ho·∫∑c kh√¥ng ch·ª©a s·ªë
    if (line.length < 5 || !/\d/.test(line)) {
      return null;
    }

    // Lo·∫°i b·ªè c√°c header ho·∫∑c footer
    if (/ITEM|PRODUCT|DESCRIPTION|TOTAL|T·ªîNG|QTY|PRICE/i.test(line)) {
      return null;
    }

    // T√¨m s·ªë ti·ªÅn (ƒë·ªãnh d·∫°ng: XXX.XXX ho·∫∑c XXX,XXX ho·∫∑c s·ªë th∆∞·ªùng)
    const amountMatches = line.match(/(\d{1,3}(?:[.,]\d{3})*|\d+)/g);
    if (!amountMatches || amountMatches.length === 0) {
      return null;
    }

    // L·∫•y s·ªë ti·ªÅn cu·ªëi c√πng (th∆∞·ªùng l√† t·ªïng ti·ªÅn)
    const lastAmount = amountMatches[amountMatches.length - 1];
    const amount = parseInt(lastAmount.replace(/[.,]/g, ''), 10);

    // Validate: s·ªë ti·ªÅn h·ª£p l√Ω (> 0 v√† < 100 tri·ªáu)
    if (amount <= 0 || amount > 100000000) {
      return null;
    }

    // Tr√≠ch xu·∫•t t√™n m·ª•c (ph·∫ßn tr∆∞·ªõc s·ªë ti·ªÅn ƒë·∫ßu ti√™n)
    const firstAmountIndex = line.indexOf(amountMatches[0]);
    let name = line.substring(0, firstAmountIndex).trim();

    // L√†m s·∫°ch t√™n m·ª•c
    name = name.replace(/^\d+\s*\.?\s*/, '') // Lo·∫°i b·ªè s·ªë th·ª© t·ª±
              .replace(/\s{2,}/g, ' ')        // Xo√° kho·∫£ng tr·∫Øng th·ª´a
              .trim();

    if (name.length === 0) {
      name = 'Item';
    }

    // Ph√¢n lo·∫°i m·ª•c
    const category = GeminiAIService._categorizeItem(name);

    // T√¨m s·ªë l∆∞·ª£ng n·∫øu c√≥
    const quantityMatch = line.match(/(\d+)\s*x\s*(\d+(?:[.,]\d{3})*|\d+)/i);
    const quantity = quantityMatch ? parseInt(quantityMatch[1], 10) : undefined;
    const unitPrice = quantityMatch ? parseInt(quantityMatch[2].replace(/[.,]/g, ''), 10) : undefined;

    return {
      name,
      amount,
      category,
      quantity,
      unitPrice,
    };
  },

  /**
   * Ph√¢n lo·∫°i m·ª•c d·ª±a tr√™n t√™n
   */
  _categorizeItem: (itemName: string): string => {
    const name = itemName.toLowerCase();

    if (/c∆°m|c√†\s*ph√™|tr√†|n∆∞·ªõc|ƒÉn|u·ªëng|th·ª©c\s*ƒÉn|ƒë·ªì\s*u·ªëng|b√°nh|m√¨|ph·ªü/i.test(name)) {
      return 'ƒÇn u·ªëng';
    }
    if (/xƒÉng|d·∫ßu|xe|giao\s*th√¥ng|taxi|xe\s*bus|ƒëi\s*l·∫°i/i.test(name)) {
      return 'Giao th√¥ng';
    }
    if (/h√≥a|ƒë∆°n|thu·ªëc|y\s*t·∫ø|b·ªánh|vi·ªán|s·ª©c\s*kh·ªèe/i.test(name)) {
      return 'Y t·∫ø';
    }
    if (/qu·∫ßn|√°o|gi√†y|d√©p|trang\s*ph·ª•c|th·ªùi\s*trang/i.test(name)) {
      return 'Mua s·∫Øm';
    }
    if (/ƒëi·ªán|n∆∞·ªõc|gas|ti·ªÅn|h√≥a\s*ƒë∆°n|thanh\s*to√°n/i.test(name)) {
      return 'Ti·ªán √≠ch';
    }
    if (/v√©|chuy·∫øn|tour|du\s*l·ªãch|kh√°ch\s*s·∫°n|ph√≤ng/i.test(name)) {
      return 'Du l·ªãch';
    }
    if (/gi·∫£i\s*tr√≠|phim|game|s√°ch|vui\s*ch∆°i/i.test(name)) {
      return 'Gi·∫£i tr√≠';
    }

    return 'Kh√°c';
  },

  /**
   * Ki·ªÉm tra xem d√≤ng c√≥ ph·∫£i ƒë·ªãa ch·ªâ hay kh√¥ng
   */
  _isAddressLine: (line: string): boolean => {
    return /ƒë·ªãa\s*ch·ªâ|address|ph·ªë|ƒë∆∞·ªùng|qu·∫≠n|huy·ªán|t·ªânh|tp|th√†nh\s*ph·ªë/i.test(line);
  },

  /**
   * Tr√≠ch xu·∫•t ng√†y t·ª´ d√≤ng text
   */
  _extractDate: (line: string): string | null => {
    // T√¨m ƒë·ªãnh d·∫°ng DD/MM/YYYY ho·∫∑c DD-MM-YYYY
    const datePatterns = [
      /(\d{1,2})\/(\d{1,2})\/(\d{4})/,           // DD/MM/YYYY
      /(\d{1,2})-(\d{1,2})-(\d{4})/,             // DD-MM-YYYY
      /(\d{4})\/(\d{1,2})\/(\d{1,2})/,           // YYYY/MM/DD
      /(\d{4})-(\d{1,2})-(\d{1,2})/,             // YYYY-MM-DD
    ];

    for (const pattern of datePatterns) {
      const match = line.match(pattern);
      if (match) {
        // Normalize sang YYYY-MM-DD
        let year, month, day;
        
        if (pattern === datePatterns[0] || pattern === datePatterns[1]) {
          day = match[1];
          month = match[2];
          year = match[3];
        } else {
          year = match[1];
          month = match[2];
          day = match[3];
        }

        day = day.padStart(2, '0');
        month = month.padStart(2, '0');

        return `${year}-${month}-${day}`;
      }
    }

    return null;
  },

  /**
   * L√†m s·∫°ch t√™n c·ª≠a h√†ng
   */
  _cleanStoreName: (name: string): string => {
    return name
      .replace(/^(STORE|SHOP|RECEIPT|H√ìA\s*ƒê∆†N)/i, '')
      .trim()
      .substring(0, 50);
  },

  /**
   * Format s·ªë ti·ªÅn sang Vietnamese Dong
   */
  formatCurrency: (amount: number, currency: string = 'VND'): string => {
    return `${amount.toLocaleString('vi-VN')} ${currency}`;
  },
};
