import firestore from '@react-native-firebase/firestore';
import auth from '@react-native-firebase/auth';

/**
 * TransactionService: X·ª≠ l√Ω t·∫•t c·∫£ logic CRUD cho giao d·ªãch
 * * ·ªîN ƒê·ªäNH CAO: M·ªçi h√†m CUD (Create, Update, Delete)
 * ƒë·ªÅu tr·∫£ v·ªÅ "freshData" ƒë∆∞·ª£c fetch tr·ª±c ti·∫øp t·ª´ server
 * ƒë·ªÉ ƒë·∫£m b·∫£o Store lu√¥n ƒë·ªìng b·ªô 100%.
 */

class TransactionService {

  /**
   * --------------------------------------------------------------------
   * PRIVATE HELPER: L·∫•y tham chi·∫øu (ref) ƒë·∫øn collection
   * --------------------------------------------------------------------
   */
  _getCollectionRef() {
    const currentUser = auth().currentUser;
    if (!currentUser) {
      throw new Error('‚ùå User not authenticated');
    }
    return firestore()
      .collection('users')
      .doc(currentUser.uid)
      .collection('transactions');
  }

  /**
   * --------------------------------------------------------------------
   * 4Ô∏è‚É£ (HELPER) L·∫§Y T·∫§T C·∫¢ GIAO D·ªäCH (ƒê√É S·ª¨A L·ªñI ID)
   * --------------------------------------------------------------------
   */
  async getAllTransactions() {
    console.log('üìã [SERVICE] Fetching all transactions from server...');
    
    try {
      if (!auth().currentUser) {
        throw new Error('‚ùå User not authenticated');
      }

      // CRITICAL: get({ source: 'server' }) bu·ªôc ƒë·ªçc t·ª´ server,
      // bypass (b·ªè qua) cache, ƒë·∫£m b·∫£o d·ªØ li·ªáu lu√¥n m·ªõi nh·∫•t.
      const snapshot = await this._getCollectionRef()
        .orderBy('createdAt', 'desc')
        .get({ source: 'server' }); 

      // ----- B·∫ÆT ƒê·∫¶U S·ª¨A L·ªñI -----
      // Di chuy·ªÉn `id: doc.id` xu·ªëng cu·ªëi c√πng
      // ƒë·ªÉ ghi ƒë√® l√™n b·∫•t k·ª≥ tr∆∞·ªùng 'id' n√†o b√™n trong doc.data()
      const transactions = snapshot.docs.map(doc => ({
        ...doc.data(), // L·∫•y d·ªØ li·ªáu (c√≥ th·ªÉ ch·ª©a 'id' gi·∫£)
        id: doc.id,     // Ghi ƒë√® b·∫±ng ID th·∫≠t
      }));
      // ----- K·∫æT TH√öC S·ª¨A L·ªñI -----

      console.log('‚úÖ [SERVICE] Fetched', transactions.length, 'transactions');
      return transactions;

    } catch (error) {
      console.error('‚ùå [SERVICE] Error fetching transactions:', error.message);
      throw error;
    }
  }


  /**
   * --------------------------------------------------------------------
   * 1Ô∏è‚É£ TH√äM GIAO D·ªäCH M·ªöI
   * Logic: Th√™m ‚Üí Fetch l·∫°i to√†n b·ªô ‚Üí Tr·∫£ v·ªÅ { freshData }
   * --------------------------------------------------------------------
   */
  async addTransaction(transactionData) {
    console.log('üìù [SERVICE] Starting addTransaction:', transactionData);
    
    try {
      const currentUser = auth().currentUser;
      if (!currentUser) {
        throw new Error('‚ùå User not authenticated');
      }

      // Step 1: Validate (H√†m _validateTransactionData c·ªßa b·∫°n)
      this._validateTransactionData(transactionData); 

      // Step 2: Chu·∫©n b·ªã d·ªØ li·ªáu
      const dataToSave = {
        ...transactionData,
        userId: currentUser.uid,
        createdAt: firestore.FieldValue.serverTimestamp(),
        updatedAt: firestore.FieldValue.serverTimestamp(),
        isDeleted: false,
      };

      // Step 3: L∆∞u v√†o Firestore
      const docRef = await this._getCollectionRef().add(dataToSave);
      console.log('‚úÖ [SERVICE] Transaction added with ID:', docRef.id);

      // Step 4: L·∫•y l·∫°i to√†n b·ªô d·ªØ li·ªáu m·ªõi nh·∫•t
      const freshTransactions = await this.getAllTransactions();

      return {
        success: true,
        newTransactionId: docRef.id,
        freshData: freshTransactions, // Tr·∫£ v·ªÅ d·ªØ li·ªáu m·ªõi
      };

    } catch (error) {
      console.error('‚ùå [SERVICE] Error adding transaction:', error.message);
      throw error;
    }
  }

  /**
   * --------------------------------------------------------------------
   * 2Ô∏è‚É£ C·∫¨P NH·∫¨T GIAO D·ªäCH
   * Logic: S·ª≠a ‚Üí Fetch l·∫°i to√†n b·ªô ‚Üí Tr·∫£ v·ªÅ { freshData }
   * --------------------------------------------------------------------
   */
  async updateTransaction(transactionId, updateData) {
    console.log('‚úèÔ∏è [SERVICE] Starting updateTransaction:', transactionId);
    
    try {
      if (!auth().currentUser) throw new Error('‚ùå User not authenticated');
      if (!transactionId) throw new Error('‚ùå Transaction ID is required');

      // Step 1: Validate
      this._validateTransactionData(updateData, true); // true = partial update

      // Step 2: Chu·∫©n b·ªã d·ªØ li·ªáu
      const dataToUpdate = {
        ...updateData,
        updatedAt: firestore.FieldValue.serverTimestamp(),
      };

      // Step 3: Update Firestore
      await this._getCollectionRef().doc(transactionId).update(dataToUpdate);
      console.log('‚úÖ [SERVICE] Transaction updated');

      // Step 4: L·∫•y l·∫°i to√†n b·ªô d·ªØ li·ªáu m·ªõi nh·∫•t
      const freshTransactions = await this.getAllTransactions();

      return {
        success: true,
        updatedId: transactionId,
        freshData: freshTransactions, // Tr·∫£ v·ªÅ d·ªØ li·ªáu m·ªõi
      };

    } catch (error) {
      console.error('‚ùå [SERVICE] Error updating transaction:', error.message);
      throw error;
    }
  }

  /**
   * --------------------------------------------------------------------
   * 3Ô∏è‚É£ X√ìA GIAO D·ªäCH
   * Logic: X√≥a ‚Üí Fetch l·∫°i to√†n b·ªô ‚Üí Tr·∫£ v·ªÅ { freshData }
   * --------------------------------------------------------------------
   */
  async deleteTransaction(transactionId) {
    console.log('üóëÔ∏è [SERVICE] Starting deleteTransaction:', transactionId);
    
    try {
      if (!auth().currentUser) throw new Error('‚ùå User not authenticated');
      if (!transactionId) throw new Error('‚ùå Transaction ID is required');

      // Step 1: Delete from Firestore
      await this._getCollectionRef().doc(transactionId).delete();
      console.log('‚úÖ [SERVICE] Transaction deleted from Firestore');

      // Step 2: L·∫•y l·∫°i to√†n b·ªô d·ªØ li·ªáu
      const freshTransactions = await this.getAllTransactions();
      
      console.log('‚úÖ [SERVICE] Delete completed. Remaining count:', freshTransactions.length);
      
      return {
        success: true,
        deletedId: transactionId,
        freshData: freshTransactions, // Tr·∫£ v·ªÅ d·ªØ li·ªáu m·ªõi
      };

    } catch (error) {
      console.error('‚ùå [SERVICE] Error deleting transaction:', error.message);
      throw error;
    }
  }

  /**
   * --------------------------------------------------------------------
   * C√ÅC H√ÄM KH√ÅC (Gi·ªØ nguy√™n c√°c h√†m helper c·ªßa b·∫°n)
   * --------------------------------------------------------------------
   */

  _validateTransactionData(data, isPartial = false) {
    if (!isPartial) {
      if (!data.type || (data.type !== 'expense' && data.type !== 'income')) {
        throw new Error('‚ùå Invalid transaction type');
      }
      if (!data.amount || data.amount <= 0) {
        throw new Error('‚ùå Amount must be greater than 0');
      }
      if (!data.categoryId) {
        throw new Error('‚ùå Category is required');
      }
      if (!data.description) {
        throw new Error('‚ùå Description is required');
      }
    }
    return true;
  }
  
  // (C√°c h√†m helper kh√°c c·ªßa b·∫°n)
  
  async getTransactionsByType(type) {
    console.log('üìã [SERVICE] Fetching transactions by type:', type);
    
    try {
      const transactions = await this.getAllTransactions();
      const filtered = transactions.filter(t => t.type === type);
      
      console.log(`‚úÖ [SERVICE] Found ${filtered.length} ${type} transactions`);
      return filtered;

    } catch (error) {
      console.error(`‚ùå [SERVICE] Error fetching ${type} transactions:`, error.message);
      throw error;
    }
  }

  async getTransactionsByCategory(categoryId) {
    console.log('üìã [SERVICE] Fetching transactions by category:', categoryId);
    
    try {
      const transactions = await this.getAllTransactions();
      const filtered = transactions.filter(t => t.categoryId === categoryId);
      
      console.log(`‚úÖ [SERVICE] Found ${filtered.length} transactions in category ${categoryId}`);
      return filtered;

    } catch (error) {
      console.error('‚ùå [SERVICE] Error fetching transactions by category:', error.message);
      throw error;
    }
  }

  async getMonthlyTotal(type = 'expense', month = null, year = null) {
    console.log('üí∞ [SERVICE] Calculating monthly total for', type);
    
    try {
      const now = new Date();
      const currentMonth = month || now.getMonth() + 1;
      const currentYear = year || now.getFullYear();

      const transactions = await this.getTransactionsByType(type);

      const total = transactions
        .filter(t => {
          const date = t.date?.toDate?.() || t.createdAt?.toDate?.() || new Date(t.date) || new Date(t.createdAt);
          return date.getFullYear() === currentYear && date.getMonth() === currentMonth - 1;
        })
        .reduce((sum, t) => sum + (parseInt(t.amount, 10) || 0), 0);

      console.log(`‚úÖ [SERVICE] Monthly ${type} total:`, total);
      return total;

    } catch (error) {
      console.error('‚ùå [SERVICE] Error calculating monthly total:', error.message);
      throw error;
    }
  }
  
  createTransactionObject(formData) {
    console.log('üîß [SERVICE] Creating transaction object from form data:', formData);
    
    try {
      const { type, amount, categoryId, categoryName, description, billImageUri } = formData;
      
      if (!type || (type !== 'expense' && type !== 'income')) {
        throw new Error('‚ùå Invalid transaction type');
      }
      if (!amount || amount <= 0) {
        throw new Error('‚ùå Amount must be greater than 0');
      }
      if (!categoryId) {
        throw new Error('‚ùå Category is required');
      }
      if (!description || !description.trim()) {
        throw new Error('‚ùå Description is required');
      }

      const now = new Date();
      const hours = now.getHours();
      const minutes = now.getMinutes();

      const transaction = {
        type,
        amount: parseInt(amount, 10),
        description: description.trim(),
        category: categoryName,
        categoryId,
        date: firestore.Timestamp.fromDate(now),
        time: `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`,
        billImageUri: billImageUri || null,
        createdAt: firestore.Timestamp.fromDate(now),
        // L∆∞u √Ω: Kh√¥ng th√™m 'id' ·ªü ƒë√¢y
      };

      console.log('‚úÖ [SERVICE] Transaction object created successfully');
      return transaction;
    } catch (error) {
      console.error('‚ùå [SERVICE] Error creating transaction object:', error.message);
      throw error;
    }
  }

  formatAmount(text) {
    const cleaned = text.replace(/[^0-9]/g, '');
    if (cleaned) {
      return parseInt(cleaned, 10).toLocaleString('vi-VN');
    }
    return '';
  }

  getCategoryName(categoryId, categories) {
    try {
      const category = categories.find(cat => cat.id === categoryId);
      return category?.name || 'Kh√°c';
    } catch (error) {
      console.error('‚ùå [SERVICE] Error getting category name:', error.message);
      return 'Kh√°c';
    }
  }

  _formatDate(dateObj) {
    try {
      const date = dateObj?.toDate?.() || new Date(dateObj);
      return date.toLocaleDateString('vi-VN');
    } catch {
      return 'Invalid date';
    }
  }
}

// Export singleton instance
export default new TransactionService();