import HabitApi from '../api/habitApi';

/**
 * HabitService: Business logic ONLY
 * Responsibility:
 * - X·ª≠ l√Ω logic kinh doanh (validation, streak calculation, etc.)
 * - G·ªçi HabitApi ƒë·ªÉ th·ª±c hi·ªán Firebase operations
 * - Fetch d·ªØ li·ªáu m·ªõi (freshData) sau m·ªói thay ƒë·ªïi
 * - Tr·∫£ v·ªÅ result object ch·ª©a {success, addedId/updatedId/deletedId, freshData}
 * - Handle errors
 *
 * Pattern: Screen ‚Üí Store ‚Üí Service ‚Üí API ‚Üí Firebase ‚Üí freshData ‚Üí Store state
 */

class HabitService {
  /**
   * 1Ô∏è‚É£ L·∫§Y T·∫§T C·∫¢ TH√ìI QUEN
   * @returns {Array} habits array
   */
  async getAllHabits() {
    try {
      console.log('üìñ [SERVICE] Getting all habits via API...');

      const habits = await HabitApi.getAllHabits();

      console.log('‚úÖ [SERVICE] Got', habits.length, 'habits');
      return habits;

    } catch (error) {
      console.error('‚ùå [SERVICE] Error getting habits:', error);
      throw error;
    }
  }

  /**
   * 2Ô∏è‚É£ TH√äM TH√ìI QUEN M·ªöI (ƒê√É ƒê·ªíNG B·ªò)
   * @param {Object} habitData - {name, icon, color, category, target, unit, schedule[], isActive}
   * @returns {Object} {success, addedId, freshData}
   */
  async addHabit(habitData) {
    try {
      console.log('‚ûï [SERVICE] Adding habit:', habitData.name);

      // 1. Th√™m th√≥i quen qua API
      const newHabitId = await HabitApi.addHabitToFirebase(habitData);

      console.log('‚úÖ [SERVICE] Habit added with ID:', newHabitId);

      // 2. Wait a bit ƒë·ªÉ Firebase sync
      await new Promise(resolve => setTimeout(resolve, 500));

      // 3. Fetch freshData (cache bypass)
      const freshData = await this.getAllHabits();

      return {
        success: true,
        addedId: newHabitId,
        freshData,
      };

    } catch (error) {
      console.error('‚ùå [SERVICE] Error adding habit:', error);
      throw error;
    }
  }

  /**
   * 3Ô∏è‚É£ C·∫¨P NH·∫¨T TH√ìI QUEN (ƒê√É ƒê·ªíNG B·ªò)
   * @param {string} habitId
   * @param {Object} updateData
   * @returns {Object} {success, updatedId, freshData}
   */
  async updateHabit(habitId, updateData) {
    try {
      console.log('‚úèÔ∏è [SERVICE] Updating habit:', habitId);

      // 1. C·∫≠p nh·∫≠t th√≥i quen qua API
      await HabitApi.updateHabitOnFirebase(habitId, updateData);

      console.log('‚úÖ [SERVICE] Habit updated');

      // 2. Wait a bit ƒë·ªÉ Firebase sync
      await new Promise(resolve => setTimeout(resolve, 500));

      // 3. Fetch freshData (cache bypass)
      const freshData = await this.getAllHabits();

      return {
        success: true,
        updatedId: habitId,
        freshData,
      };

    } catch (error) {
      console.error('‚ùå [SERVICE] Error updating habit:', error);
      throw error;
    }
  }

  /**
   * 4Ô∏è‚É£ X√ìA TH√ìI QUEN (ƒê√É ƒê·ªíNG B·ªò)
   * @param {string} habitId
   * @returns {Object} {success, deletedId, freshData}
   */
  async deleteHabit(habitId) {
    try {
      console.log('üóëÔ∏è [SERVICE] Deleting habit:', habitId);

      // 1. X√≥a th√≥i quen qua API
      await HabitApi.deleteHabitFromFirebase(habitId);

      console.log('‚úÖ [SERVICE] Habit deleted');

      // 2. Wait a bit ƒë·ªÉ Firebase sync
      await new Promise(resolve => setTimeout(resolve, 500));

      // 3. Fetch freshData (cache bypass)
      const freshData = await this.getAllHabits();

      return {
        success: true,
        deletedId: habitId,
        freshData,
      };

    } catch (error) {
      console.error('‚ùå [SERVICE] Error deleting habit:', error);
      throw error;
    }
  }

  /**
   * 5Ô∏è‚É£ TOGGLE HO√ÄN TH√ÄNH HOM NAY (ƒê√É ƒê·ªíNG B·ªò)
   * @param {string} habitId
   * @returns {Object} {success, updatedId, freshData}
   */
  async toggleHabitToday(habitId) {
    try {
      console.log('üéØ [SERVICE] Toggling habit completion for today:', habitId);

      const today = new Date().toDateString();

      // L·∫•y habit hi·ªán t·∫°i t·ª´ API
      const habitData = await HabitApi.getHabitByIdFromFirebase(habitId);
      
      if (!habitData) {
        throw new Error('Th√≥i quen kh√¥ng t·ªìn t·∫°i');
      }

      const completedDates = habitData.completedDates || [];
      const isCompletedToday = completedDates.includes(today);

      // BUSINESS LOGIC: Toggle
      let newCompletedDates = isCompletedToday
        ? completedDates.filter(d => d !== today)
        : [...completedDates, today];

      // BUSINESS LOGIC: Calculate streak
      let newStreak = habitData.currentStreak || 0;
      let newBestStreak = habitData.bestStreak || 0;

      if (!isCompletedToday) {
        // Mark as completed
        newStreak = (newStreak || 0) + 1;
        newBestStreak = Math.max(newStreak, newBestStreak);
        console.log('üéØ [SERVICE] Habit completed! Streak:', newStreak);
      } else {
        // Unmark as completed - reset streak
        newStreak = 0;
        console.log('‚Ü©Ô∏è [SERVICE] Habit unmarked. Streak reset.');
      }

      // Update Firebase qua API
      await HabitApi.updateStreakOnFirebase(habitId, {
        completedDates: newCompletedDates,
        currentStreak: newStreak,
        bestStreak: newBestStreak,
      });

      console.log('‚úÖ [SERVICE] Habit toggled');

      // Wait a bit
      await new Promise(resolve => setTimeout(resolve, 500));

      // Fetch freshData
      const freshData = await this.getAllHabits();

      return {
        success: true,
        updatedId: habitId,
        isCompletedToday: !isCompletedToday,
        newStreak,
        freshData,
      };

    } catch (error) {
      console.error('‚ùå [SERVICE] Error toggling habit:', error);
      throw error;
    }
  }

  /**
   * 6Ô∏è‚É£ L·∫§Y TH√ìI QUEN THEO ID
   * @param {string} habitId
   * @returns {Object} habit
   */
  async getHabitById(habitId) {
    try {
      console.log('üìñ [SERVICE] Getting habit by ID:', habitId);

      const habit = await HabitApi.getHabitByIdFromFirebase(habitId);

      return habit;

    } catch (error) {
      console.error('‚ùå [SERVICE] Error getting habit by ID:', error);
      throw error;
    }
  }

  /**
   * 7Ô∏è‚É£ L·∫§Y TH√ìI QUEN THEO DANH M·ª§C
   * @param {string} category
   * @returns {Array} habits
   */
  async getHabitsByCategory(category) {
    try {
      const habits = await this.getAllHabits();
      return habits.filter(h => h.category === category);
    } catch (error) {
      console.error('‚ùå [SERVICE] Error fetching habits by category:', error);
      throw error;
    }
  }

  /**
   * 8Ô∏è‚É£ T√çNH COMPLETION RATE
   * @param {string} habitId
   * @returns {number} percentage (0-100)
   */
  async getCompletionRate(habitId) {
    try {
      const habit = await this.getHabitById(habitId);
      if (!habit || !habit.completedDates) return 0;

      const createdDate = new Date(habit.createdAt?.toDate?.() || habit.createdAt);
      const today = new Date();
      const totalDays = Math.ceil((today - createdDate) / (1000 * 60 * 60 * 24)) || 1;

      return Math.round((habit.completedDates.length / totalDays) * 100);

    } catch (error) {
      console.error('‚ùå [SERVICE] Error calculating completion rate:', error);
      throw error;
    }
  }
}

export default new HabitService();
