import React, { useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Switch,
  Animated,
  Alert,
} from "react-native";
import type { NativeStackScreenProps } from "@react-navigation/native-stack";
import type { RootStackParamList } from "../../navigation/types";

type Props = NativeStackScreenProps<RootStackParamList, "Settings">;

export default function SettingsScreen({ navigation }: Props) {
  const [fadeAnim] = useState(new Animated.Value(0));
  
  // Settings state
  const [darkMode, setDarkMode] = useState(true);
  const [language, setLanguage] = useState<"vi" | "en">("vi");
  const [notifications, setNotifications] = useState(true);
  const [aiMode, setAIMode] = useState<"basic" | "advanced">("advanced");
  const [autoBackup, setAutoBackup] = useState(true);
  const [biometric, setBiometric] = useState(false);

  React.useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 600,
      useNativeDriver: true,
    }).start();
  }, [fadeAnim]);

  const handleClearCache = () => {
    Alert.alert(
      "X√≥a b·ªô nh·ªõ ƒë·ªám",
      "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b·ªô nh·ªõ ƒë·ªám? ƒêi·ªÅu n√†y s·∫Ω gi·∫£i ph√≥ng dung l∆∞·ª£ng nh∆∞ng c√≥ th·ªÉ l√†m ch·∫≠m ·ª©ng d·ª•ng l·∫ßn ƒë·∫ßu s·ª≠ d·ª•ng.",
      [
        { text: "H·ªßy", style: "cancel" },
        { text: "X√≥a", onPress: () => Alert.alert("Th√†nh c√¥ng", "ƒê√£ x√≥a 128MB") },
      ]
    );
  };

  const handleResetSettings = () => {
    Alert.alert(
      "ƒê·∫∑t l·∫°i c√†i ƒë·∫∑t",
      "B·∫°n c√≥ ch·∫Øc mu·ªën ƒë·∫∑t l·∫°i t·∫•t c·∫£ c√†i ƒë·∫∑t v·ªÅ m·∫∑c ƒë·ªãnh?",
      [
        { text: "H·ªßy", style: "cancel" },
        { 
          text: "ƒê·∫∑t l·∫°i", 
          style: "destructive",
          onPress: () => {
            setDarkMode(true);
            setLanguage("vi");
            setNotifications(true);
            setAIMode("advanced");
            setAutoBackup(true);
            setBiometric(false);
            Alert.alert("Th√†nh c√¥ng", "ƒê√£ ƒë·∫∑t l·∫°i c√†i ƒë·∫∑t");
          }
        },
      ]
    );
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
          <Text style={styles.backIcon}>‚Üê</Text>
        </TouchableOpacity>
        <Text style={styles.headerTitle}>C√†i ƒë·∫∑t</Text>
        <View style={styles.placeholder} />
      </View>

      <ScrollView contentContainerStyle={styles.content} showsVerticalScrollIndicator={false}>
        <Animated.View style={{ opacity: fadeAnim }}>
          {/* Appearance */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>üé® Giao di·ªán</Text>

            <View style={styles.settingRow}>
              <View style={styles.settingInfo}>
                <Text style={styles.settingLabel}>Ch·∫ø ƒë·ªô t·ªëi</Text>
                <Text style={styles.settingDescription}>Giao di·ªán t·ªëi d·ªÖ nh√¨n h∆°n</Text>
              </View>
              <Switch
                value={darkMode}
                onValueChange={setDarkMode}
                trackColor={{ false: "rgba(255,255,255,0.1)", true: "#6366F1" }}
                thumbColor="#fff"
              />
            </View>

            <TouchableOpacity style={styles.settingRow}>
              <View style={styles.settingInfo}>
                <Text style={styles.settingLabel}>Ng√¥n ng·ªØ</Text>
                <Text style={styles.settingDescription}>
                  {language === "vi" ? "Ti·∫øng Vi·ªát" : "English"}
                </Text>
              </View>
              <TouchableOpacity
                style={styles.languageToggle}
                onPress={() => setLanguage(language === "vi" ? "en" : "vi")}
              >
                <Text style={styles.languageText}>
                  {language === "vi" ? "üáªüá≥" : "üá¨üáß"}
                </Text>
              </TouchableOpacity>
            </TouchableOpacity>
          </View>

          {/* Notifications */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>üîî Th√¥ng b√°o</Text>

            <View style={styles.settingRow}>
              <View style={styles.settingInfo}>
                <Text style={styles.settingLabel}>B·∫≠t th√¥ng b√°o</Text>
                <Text style={styles.settingDescription}>Nh·∫≠n nh·∫Øc nh·ªü v√† c·∫≠p nh·∫≠t</Text>
              </View>
              <Switch
                value={notifications}
                onValueChange={setNotifications}
                trackColor={{ false: "rgba(255,255,255,0.1)", true: "#6366F1" }}
                thumbColor="#fff"
              />
            </View>

            {notifications && (
              <>
                <View style={styles.subSettingRow}>
                  <Text style={styles.subSettingLabel}>Th√≥i quen h√†ng ng√†y</Text>
                  <Switch
                    value={true}
                    onValueChange={() => {}}
                    trackColor={{ false: "rgba(255,255,255,0.1)", true: "#6366F1" }}
                    thumbColor="#fff"
                  />
                </View>

                <View style={styles.subSettingRow}>
                  <Text style={styles.subSettingLabel}>Nh·∫Øc nh·ªü ng√¢n s√°ch</Text>
                  <Switch
                    value={true}
                    onValueChange={() => {}}
                    trackColor={{ false: "rgba(255,255,255,0.1)", true: "#6366F1" }}
                    thumbColor="#fff"
                  />
                </View>

                <View style={styles.subSettingRow}>
                  <Text style={styles.subSettingLabel}>C·∫≠p nh·∫≠t t·ª´ AI</Text>
                  <Switch
                    value={false}
                    onValueChange={() => {}}
                    trackColor={{ false: "rgba(255,255,255,0.1)", true: "#6366F1" }}
                    thumbColor="#fff"
                  />
                </View>
              </>
            )}
          </View>

          {/* AI Settings */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>ü§ñ Tr·ª£ l√Ω AI</Text>

            <TouchableOpacity
              style={styles.settingRow}
              onPress={() => navigation.navigate("AISetting")}
            >
              <View style={styles.settingInfo}>
                <Text style={styles.settingLabel}>C·∫•u h√¨nh AI chi ti·∫øt</Text>
                <Text style={styles.settingDescription}>T√≠nh c√°ch, gi·ªçng n√≥i, ng√¥n ng·ªØ</Text>
              </View>
              <Text style={styles.chevron}>‚Üí</Text>
            </TouchableOpacity>

            <View style={styles.aiModeSelector}>
              <Text style={styles.aiModeLabel}>Ch·∫ø ƒë·ªô AI</Text>
              <View style={styles.aiModeButtons}>
                <TouchableOpacity
                  style={[styles.aiModeButton, aiMode === "basic" && styles.aiModeButtonActive]}
                  onPress={() => setAIMode("basic")}
                >
                  <Text style={[styles.aiModeButtonText, aiMode === "basic" && styles.aiModeButtonTextActive]}>
                    C∆° b·∫£n
                  </Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={[styles.aiModeButton, aiMode === "advanced" && styles.aiModeButtonActive]}
                  onPress={() => setAIMode("advanced")}
                >
                  <Text style={[styles.aiModeButtonText, aiMode === "advanced" && styles.aiModeButtonTextActive]}>
                    N√¢ng cao
                  </Text>
                </TouchableOpacity>
              </View>
              <Text style={styles.aiModeDescription}>
                {aiMode === "basic" 
                  ? "AI ƒë∆∞a ra g·ª£i √Ω ƒë∆°n gi·∫£n, d·ªÖ hi·ªÉu" 
                  : "AI ph√¢n t√≠ch s√¢u v√† ƒë∆∞a ra g·ª£i √Ω chi ti·∫øt"}
              </Text>
            </View>
          </View>

          {/* Finance Management */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>üí≥ Qu·∫£n l√Ω t√†i ch√≠nh</Text>

            <TouchableOpacity 
              style={styles.settingRow}
              onPress={() => navigation.navigate("WalletManagement")}
            >
              <View style={styles.settingInfo}>
                <Text style={styles.settingLabel}>Qu·∫£n l√Ω v√≠</Text>
                <Text style={styles.settingDescription}>Th√™m, s·ª≠a, x√≥a v√≠ & t√†i kho·∫£n</Text>
              </View>
              <Text style={styles.chevron}>‚Üí</Text>
            </TouchableOpacity>

            <TouchableOpacity 
              style={styles.settingRow}
              onPress={() => navigation.navigate("CategoryManagement")}
            >
              <View style={styles.settingInfo}>
                <Text style={styles.settingLabel}>Danh m·ª•c chi ti√™u</Text>
                <Text style={styles.settingDescription}>T√πy ch·ªânh danh m·ª•c chi ti√™u</Text>
              </View>
              <Text style={styles.chevron}>‚Üí</Text>
            </TouchableOpacity>

            <TouchableOpacity 
              style={styles.settingRow}
              onPress={() => navigation.navigate("RecurringTransactions")}
            >
              <View style={styles.settingInfo}>
                <Text style={styles.settingLabel}>Giao d·ªãch l·∫∑p l·∫°i</Text>
                <Text style={styles.settingDescription}>Qu·∫£n l√Ω h√≥a ƒë∆°n & thu nh·∫≠p ƒë·ªãnh k·ª≥</Text>
              </View>
              <Text style={styles.chevron}>‚Üí</Text>
            </TouchableOpacity>
          </View>

          {/* Data & Security */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>üîí D·ªØ li·ªáu & B·∫£o m·∫≠t</Text>

            <View style={styles.settingRow}>
              <View style={styles.settingInfo}>
                <Text style={styles.settingLabel}>T·ª± ƒë·ªông sao l∆∞u</Text>
                <Text style={styles.settingDescription}>Sao l∆∞u m·ªói ng√†y l√∫c 2AM</Text>
              </View>
              <Switch
                value={autoBackup}
                onValueChange={setAutoBackup}
                trackColor={{ false: "rgba(255,255,255,0.1)", true: "#6366F1" }}
                thumbColor="#fff"
              />
            </View>

            <View style={styles.settingRow}>
              <View style={styles.settingInfo}>
                <Text style={styles.settingLabel}>X√°c th·ª±c sinh h·ªçc</Text>
                <Text style={styles.settingDescription}>Face ID / Touch ID</Text>
              </View>
              <Switch
                value={biometric}
                onValueChange={setBiometric}
                trackColor={{ false: "rgba(255,255,255,0.1)", true: "#6366F1" }}
                thumbColor="#fff"
              />
            </View>

            <TouchableOpacity style={styles.settingRow}>
              <View style={styles.settingInfo}>
                <Text style={styles.settingLabel}>Xu·∫•t d·ªØ li·ªáu</Text>
                <Text style={styles.settingDescription}>T·∫£i v·ªÅ file CSV/JSON</Text>
              </View>
              <Text style={styles.chevron}>‚Üí</Text>
            </TouchableOpacity>
          </View>

          {/* About */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>‚ÑπÔ∏è Th√¥ng tin</Text>

            <TouchableOpacity style={styles.settingRow}>
              <View style={styles.settingInfo}>
                <Text style={styles.settingLabel}>Phi√™n b·∫£n</Text>
                <Text style={styles.settingDescription}>1.0.0 (Build 100)</Text>
              </View>
            </TouchableOpacity>

            <TouchableOpacity 
              style={styles.settingRow}
              onPress={() => navigation.navigate("About")}
            >
              <View style={styles.settingInfo}>
                <Text style={styles.settingLabel}>Gi·ªõi thi·ªáu ·ª©ng d·ª•ng</Text>
                <Text style={styles.settingDescription}>Team, t√≠nh nƒÉng, li√™n h·ªá</Text>
              </View>
              <Text style={styles.chevron}>‚Üí</Text>
            </TouchableOpacity>

            <TouchableOpacity 
              style={styles.settingRow}
              onPress={() => navigation.navigate("HelpCenter")}
            >
              <View style={styles.settingInfo}>
                <Text style={styles.settingLabel}>Trung t√¢m tr·ª£ gi√∫p</Text>
                <Text style={styles.settingDescription}>FAQ & H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</Text>
              </View>
              <Text style={styles.chevron}>‚Üí</Text>
            </TouchableOpacity>

            <TouchableOpacity style={styles.settingRow}>
              <View style={styles.settingInfo}>
                <Text style={styles.settingLabel}>ƒêi·ªÅu kho·∫£n d·ªãch v·ª•</Text>
              </View>
              <Text style={styles.chevron}>‚Üí</Text>
            </TouchableOpacity>

            <TouchableOpacity style={styles.settingRow}>
              <View style={styles.settingInfo}>
                <Text style={styles.settingLabel}>Ch√≠nh s√°ch b·∫£o m·∫≠t</Text>
              </View>
              <Text style={styles.chevron}>‚Üí</Text>
            </TouchableOpacity>
          </View>

          {/* Danger Zone */}
          <View style={styles.section}>
            <TouchableOpacity style={styles.dangerButton} onPress={handleClearCache}>
              <Text style={styles.dangerButtonText}>üóëÔ∏è X√≥a b·ªô nh·ªõ ƒë·ªám</Text>
            </TouchableOpacity>

            <TouchableOpacity style={styles.dangerButton} onPress={handleResetSettings}>
              <Text style={styles.dangerButtonText}>üîÑ ƒê·∫∑t l·∫°i c√†i ƒë·∫∑t</Text>
            </TouchableOpacity>
          </View>
        </Animated.View>
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#0A0E27" },
  header: { flexDirection: "row", alignItems: "center", justifyContent: "space-between", paddingTop: 48, paddingHorizontal: 16, paddingBottom: 16, borderBottomWidth: 1, borderBottomColor: "rgba(255,255,255,0.05)" },
  backButton: { width: 40, height: 40, borderRadius: 12, backgroundColor: "rgba(255,255,255,0.06)", alignItems: "center", justifyContent: "center" },
  backIcon: { fontSize: 20, color: "#fff" },
  headerTitle: { fontSize: 18, fontWeight: "800", color: "#fff" },
  placeholder: { width: 40 },
  content: { padding: 16 },
  section: { marginBottom: 24 },
  sectionTitle: { fontSize: 16, fontWeight: "800", color: "#fff", marginBottom: 12 },
  settingRow: { flexDirection: "row", justifyContent: "space-between", alignItems: "center", backgroundColor: "rgba(255,255,255,0.04)", borderRadius: 12, padding: 16, marginBottom: 12 },
  settingInfo: { flex: 1 },
  settingLabel: { fontSize: 16, fontWeight: "700", color: "#fff", marginBottom: 4 },
  settingDescription: { fontSize: 13, color: "rgba(255,255,255,0.6)" },
  chevron: { fontSize: 20, color: "rgba(255,255,255,0.5)", marginLeft: 12 },
  languageToggle: { width: 40, height: 40, borderRadius: 20, backgroundColor: "rgba(255,255,255,0.08)", alignItems: "center", justifyContent: "center" },
  languageText: { fontSize: 24 },
  subSettingRow: { flexDirection: "row", justifyContent: "space-between", alignItems: "center", backgroundColor: "rgba(255,255,255,0.02)", borderRadius: 8, padding: 12, marginBottom: 8, marginLeft: 16 },
  subSettingLabel: { fontSize: 14, fontWeight: "600", color: "rgba(255,255,255,0.8)" },
  aiModeSelector: { backgroundColor: "rgba(255,255,255,0.04)", borderRadius: 12, padding: 16 },
  aiModeLabel: { fontSize: 14, fontWeight: "700", color: "rgba(255,255,255,0.8)", marginBottom: 12 },
  aiModeButtons: { flexDirection: "row", gap: 8, marginBottom: 12 },
  aiModeButton: { flex: 1, backgroundColor: "rgba(255,255,255,0.06)", borderRadius: 8, paddingVertical: 12, alignItems: "center", borderWidth: 2, borderColor: "transparent" },
  aiModeButtonActive: { borderColor: "#6366F1", backgroundColor: "rgba(99,102,241,0.1)" },
  aiModeButtonText: { fontSize: 14, fontWeight: "700", color: "rgba(255,255,255,0.6)" },
  aiModeButtonTextActive: { color: "#fff" },
  aiModeDescription: { fontSize: 12, color: "rgba(255,255,255,0.6)", lineHeight: 18 },
  dangerButton: { backgroundColor: "rgba(239,68,68,0.1)", borderRadius: 12, padding: 16, alignItems: "center", marginBottom: 12, borderWidth: 1, borderColor: "rgba(239,68,68,0.3)" },
  dangerButtonText: { color: "#EF4444", fontWeight: "700", fontSize: 15 },
});
