/**
 * M√†n h√¨nh L·ªãch s·ª≠ Giao d·ªãch (Ghi ch√∫)
 *
 * UI ƒë∆∞·ª£c refactor th√†nh d·∫°ng List (Danh s√°ch) thay v√¨ Grid (L∆∞·ªõi).
 * - ƒê√£ x√≥a Dimensions import kh√¥ng d√πng.
 * - ƒê√£ x√≥a imageOverlay g√¢y m·ªù ·∫£nh.
 * - ƒê√£ thay n√∫t X√≥a b·∫±ng onLongPress (nh·∫•n gi·ªØ ƒë·ªÉ x√≥a).
 * - To√†n b·ªô logic v·ªõi Zustand store (fetch, delete, update) ƒë∆∞·ª£c gi·ªØ nguy√™n.
 */

import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  KeyboardAvoidingView,
  Platform,
  Alert,
  Animated,
  ActivityIndicator,
  FlatList,
  RefreshControl,
  Image,
  // Dimensions ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi ƒë√¢y v√¨ kh√¥ng c√≤n d√πng
} from "react-native";
import { useFocusEffect } from "@react-navigation/native";
import type { NativeStackScreenProps } from "@react-navigation/native-stack";
import type { RootStackParamList } from "../../navigation/types";
import { useTransactionStore } from "../../store/transactionStore";
import TransactionHistoryService from "../../services/TransactionHistoryService";

type Props = NativeStackScreenProps<RootStackParamList, "TransactionHistory">;

interface Transaction {
  id: string;
  type: "expense" | "income";
  amount: number;
  description: string;
  category: string;
  categoryId: string;
  date?: any;
  time?: string;
  createdAt?: any;
  billImageUri?: string | null;
}

interface TransactionWithTitle extends Transaction {
  displayTitle: string;
  hasImage: boolean;
}

export default function TransactionHistoryScreen({ navigation }: Props) {
  const [isLoading, setIsLoading] = useState(false);
  const [refreshing, setRefreshing] = useState(false);
  const [fadeAnim] = useState(new Animated.Value(0));

  // ‚úÖ Subscribe to Store - transactions t·ª´ Store
  const transactions = useTransactionStore((state) => state.transactions);

  useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 600,
      useNativeDriver: true,
    }).start();

    loadTransactions();
  }, [fadeAnim]);

  // ‚úÖ useFocusEffect ƒë·ªÉ fetch fresh data khi quay l·∫°i screen
  useFocusEffect(
    React.useCallback(() => {
      console.log("üìÑ [HISTORY-SCREEN] Screen focused - fetching fresh transactions");
      loadTransactions();
    }, [])
  );

  const loadTransactions = async () => {
    setIsLoading(true);
    try {
      console.log("üìÑ [HISTORY-SCREEN] Loading transactions from Store");
      // ‚úÖ G·ªçi Store ƒë·ªÉ fetch fresh data t·ª´ Firebase
      await useTransactionStore.getState().fetchTransactions();
      console.log("‚úÖ [HISTORY-SCREEN] Transactions loaded from Store");
    } catch (error) {
      console.error("‚ùå [HISTORY-SCREEN] Error loading transactions:", error);
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ giao d·ªãch");
    } finally {
      setIsLoading(false);
    }
  };

  const onRefresh = async () => {
    setRefreshing(true);
    try {
      console.log("üîÑ [HISTORY-SCREEN] Refreshing transactions");
      // ‚úÖ Pull-to-refresh - fetch fresh data t·ª´ Store
      await useTransactionStore.getState().fetchTransactions();
      console.log("‚úÖ [HISTORY-SCREEN] Transactions refreshed");
    } catch (error) {
      console.error("‚ùå [HISTORY-SCREEN] Error refreshing transactions:", error);
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ l√†m m·ªõi danh s√°ch");
    } finally {
      setRefreshing(false);
    }
  };

  const handleEditTitle = (transaction: TransactionWithTitle) => {
    // Navigate to EditTransaction screen
    navigation.navigate("EditTransaction" as any, { transaction });
  };



  const handleDelete = (transaction: Transaction) => {
    Alert.alert(
      "X√°c nh·∫≠n x√≥a",
      `B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a giao d·ªãch "${transaction.description}" (${transaction.amount.toLocaleString(
        "vi-VN"
      )}ƒë)?`,
      [
        {
          text: "H·ªßy",
          onPress: () => {},
          style: "cancel",
        },
        {
          text: "X√≥a",
          onPress: async () => {
            try {
              console.log("üóëÔ∏è [HISTORY-SCREEN] Starting delete for:", transaction.id);
              console.log("üóëÔ∏è [HISTORY-SCREEN] Deleting from Store...");
              // ‚úÖ X√≥a t·ª´ Store
              await useTransactionStore.getState().deleteTransaction(transaction.id);
              
              console.log("‚úÖ [HISTORY-SCREEN] Delete successful");
              Alert.alert("Th√†nh c√¥ng", "ƒê√£ x√≥a giao d·ªãch");
            } catch (error) {
              console.error("‚ùå [HISTORY-SCREEN] Error deleting transaction:", error);
              Alert.alert("L·ªói", "Kh√¥ng th·ªÉ x√≥a giao d·ªãch");
            }
          },
          style: "destructive",
        },
      ]
    );
  };

  const groupedTransactions = TransactionHistoryService.groupTransactionsByDate(
    transactions
  ) as Record<string, Transaction[]>;
  const dateKeys: string[] = Object.keys(groupedTransactions).sort((a, b) => {
    // S·∫Øp x·∫øp t·ª´ m·ªõi nh·∫•t (sau) ƒë·∫øn c≈© nh·∫•t (tr∆∞·ªõc)
    const dateA = new Date(a).getTime();
    const dateB = new Date(b).getTime();
    return dateB - dateA; // Gi·∫£m d·∫ßn (m·ªõi nh·∫•t ·ªü tr√™n)
  });

  console.log("üìã Total transactions:", transactions.length);
  console.log("üìã Date keys (sorted):", dateKeys);
  console.log("üìã First date transactions:", dateKeys.length > 0 ? groupedTransactions[dateKeys[0]]?.length : 0);

  /**
   * üé® [BANKING UI REDESIGN]
   * Render item d∆∞·ªõi d·∫°ng List gi·ªëng ng√¢n h√†ng - S√°ng, tinh t·∫ø, chuy√™n nghi·ªáp
   */
  const renderTransactionItem = ({ item }: { item: Transaction }) => {
    const isExpense = item.type === "expense";
    const categoryEmoji = TransactionHistoryService.getCategoryEmoji(item.categoryId);
    const hasImage = !!item.billImageUri;
    const displayTitle = item.description || item.category;

    const date = new Date(item.date?.toDate?.() || item.createdAt?.toDate?.());
    const timeStr = date.toLocaleTimeString("vi-VN", {
      hour: "2-digit",
      minute: "2-digit",
    });
    const dateStr = date.toLocaleDateString("vi-VN");

    console.log(`üé´ Item: ${displayTitle}, hasImage: ${hasImage}, type: ${item.type}, amount: ${item.amount}`);

    return (
      <TouchableOpacity
        style={styles.bankListItem}
        activeOpacity={0.6}
        onPress={() => handleEditTitle({ ...item, displayTitle, hasImage } as TransactionWithTitle)}
        onLongPress={() => handleDelete(item)}
      >
        {/* Icon Container (B√™n tr√°i - Tr√≤n s√°ng) */}
        <View style={[styles.bankIconBox, isExpense ? styles.bankIconExpense : styles.bankIconIncome]}>
          {hasImage && item.billImageUri ? (
            <Image
              source={{ uri: item.billImageUri }}
              style={styles.bankIconImage}
              resizeMode="cover"
            />
          ) : (
            <Text style={styles.bankIconEmoji}>{categoryEmoji}</Text>
          )}
        </View>
        
        {/* Th√¥ng tin gi·ªØa */}
        <View style={styles.bankInfoContainer}>
          <Text style={styles.bankItemTitle} numberOfLines={1}>
            {displayTitle}
          </Text>
          <Text style={styles.bankItemDateTime}>
            {timeStr} ‚Ä¢ {dateStr}
          </Text>
        </View>

        {/* S·ªë ti·ªÅn b√™n ph·∫£i */}
        <View style={styles.bankAmountContainer}>
          <Text
            style={[
              styles.bankItemAmount,
              isExpense ? styles.bankAmountExpense : styles.bankAmountIncome,
            ]}
            numberOfLines={1}
          >
            {isExpense ? "-" : "+"} ‚Ç´{Math.abs(item.amount).toLocaleString("vi-VN")}
          </Text>
        </View>
      </TouchableOpacity>
    );
  };

  /**
   * üé® [UI REFACTOR]
   * Render Header (H√¥m nay...) v√† List (Danh s√°ch)
   */
  const renderDateSection = ({ item: dateKey }: { item: string }) => {
    let dayTransactions = groupedTransactions[dateKey] || [];
    
    // ‚úÖ S·∫Øp x·∫øp giao d·ªãch t·ª´ m·ªõi nh·∫•t ƒë·∫øn c≈© nh·∫•t trong ng√†y
    dayTransactions = dayTransactions.sort((a: Transaction, b: Transaction) => {
      const timeA = new Date(a.date?.toDate?.() || a.createdAt?.toDate?.()).getTime();
      const timeB = new Date(b.date?.toDate?.() || b.createdAt?.toDate?.()).getTime();
      return timeB - timeA; // Gi·∫£m d·∫ßn
    });

    return (
      <View style={styles.dateSection}>
        {/* Date Header (Gi·ªØ nguy√™n, r·∫•t t·ªët) */}
        <View style={styles.dateHeader}>
          <View>
            <Text style={styles.dateText}>{dateKey}</Text>
            <Text style={styles.dateSubText}>{dayTransactions.length} giao d·ªãch</Text>
          </View>

          {/* Daily Summary (Gi·ªØ nguy√™n, r·∫•t t·ªët) */}
          <View style={styles.dailySummary}>
            {dayTransactions.some((t: Transaction) => t.type === "expense") && (
              <View style={styles.summaryItem}>
                <Text style={styles.summaryLabel}>üí∏ Chi</Text>
                <Text style={styles.summaryAmount}>
                  ‚Ç´
                  {dayTransactions
                    .filter((t: Transaction) => t.type === "expense")
                    .reduce((sum: number, t: Transaction) => sum + (t.amount || 0), 0)
                    .toLocaleString("vi-VN")}
                </Text>
              </View>
            )}
            {dayTransactions.some((t: Transaction) => t.type === "income") && (
              <View style={styles.summaryItem}>
                <Text style={styles.summaryLabel}>üí∞ Thu</Text>
                <Text style={[styles.summaryAmount, styles.summaryAmountIncome]}>
                  ‚Ç´
                  {dayTransactions
                    .filter((t: Transaction) => t.type === "income")
                    .reduce((sum: number, t: Transaction) => sum + (t.amount || 0), 0)
                    .toLocaleString("vi-VN")}
                </Text>
              </View>
            )}
          </View>
        </View>

        {/* üé® [UI REFACTOR] B·ªè Grid, thay b·∫±ng List container */}
        <View style={styles.listContainer}>
          {dayTransactions.map((transaction: Transaction, index: number) => (
            <View key={`${dateKey}-${index}-${transaction.id}`}>
              {renderTransactionItem({ item: transaction })}
            </View>
          ))}
        </View>
      </View>
    );
  };

  return (
    <KeyboardAvoidingView
      style={styles.container}
      behavior={Platform.OS === "ios" ? "padding" : undefined}
    >
      {/* Header (Gi·ªØ nguy√™n) */}
      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <Text style={styles.backIcon}>‚Üê</Text>
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Ghi ch√∫</Text>
        <View style={styles.placeholderButton} />
      </View>

      {/* Loading (Gi·ªØ nguy√™n) */}
      {isLoading ? (
        <View style={styles.centerContainer}>
          <ActivityIndicator size="large" color="#6366F1" />
          <Text style={styles.loadingText}>ƒêang t·∫£i...</Text>
        </View>
        
      /* Empty State (Gi·ªØ nguy√™n) */
      ) : transactions.length === 0 ? (
        <View style={styles.centerContainer}>
          <Text style={styles.emptyIcon}>üì≠</Text>
          <Text style={styles.emptyText}>Ch∆∞a c√≥ ghi ch√∫ n√†o</Text>
          <Text style={styles.emptySubText}>H√£y th√™m ghi ch√∫ m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu</Text>
          <TouchableOpacity
            style={styles.addButton}
            onPress={() => navigation.navigate("AddTransaction" as any)}
          >
            <Text style={styles.addButtonText}>+ Th√™m ghi ch√∫</Text>
          </TouchableOpacity>
        </View>
        
      /* FlatList (Gi·ªØ nguy√™n) */
      ) : (
        <FlatList
          data={dateKeys}
          renderItem={renderDateSection}
          keyExtractor={(item) => item}
          refreshControl={
            <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
          }
          scrollEnabled={true}
          contentContainerStyle={styles.listContent}
          showsVerticalScrollIndicator={false}
        />
      )}

      {/* Floating Add Button (Gi·ªØ nguy√™n) */}
      {transactions.length > 0 && (
        <TouchableOpacity
          style={styles.floatingButton}
          onPress={() => navigation.navigate("AddTransaction" as any)}
        >
          <Text style={styles.floatingButtonText}>+</Text>
        </TouchableOpacity>
      )}


    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#E0F2F1" },
  header: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingTop: 48,
    paddingHorizontal: 16,
    paddingBottom: 16,
    borderBottomWidth: 1,
    borderBottomColor: "rgba(0,0,0,0.03)",
    backgroundColor: "#E0F2F1",
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 12,
    backgroundColor: "rgba(76,175,80,0.1)",
    alignItems: "center",
    justifyContent: "center",
  },
  backIcon: { fontSize: 20, color: "#1F2937" },
  headerTitle: { fontSize: 18, fontWeight: "800", color: "#111827" },
  placeholderButton: { width: 40, height: 40 },

  /* Center Container (Loading/Empty) */
  centerContainer: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#E0F2F1",
  },
  loadingText: {
    color: "#00796B",
    marginTop: 12,
    fontSize: 14,
  },
  emptyIcon: { fontSize: 64, marginBottom: 16 },
  emptyText: {
    fontSize: 18,
    fontWeight: "700",
    color: "#111827",
    marginBottom: 8,
  },
  emptySubText: {
    fontSize: 13,
    color: "#6B7280",
    marginBottom: 24,
  },
  addButton: {
    backgroundColor: "#00897B",
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 12,
  },
  addButtonText: { color: "#fff", fontWeight: "700", fontSize: 14 },

  /* List Layout */
  listContent: {
    paddingHorizontal: 16,
    paddingBottom: 120,
    paddingTop: 12,
  },

  /* Date Section */
  dateSection: {
    marginBottom: 24,
  },
  dateHeader: {
    flexDirection: "row",
    alignItems: "flex-start",
    justifyContent: "space-between",
    marginBottom: 12,
    paddingHorizontal: 8,
  },
  dateText: {
    fontSize: 16,
    fontWeight: "800",
    color: "#00796B",
    marginBottom: 4,
  },
  dateSubText: {
    fontSize: 12,
    color: "#00796B",
    fontWeight: "600",
    opacity: 0.7,
  },

  /* Daily Summary */
  dailySummary: {
    gap: 12,
    alignItems: "flex-end",
  },
  summaryItem: {
    alignItems: "flex-end",
  },
  summaryLabel: {
    fontSize: 11,
    color: "#00796B",
    fontWeight: "600",
    marginBottom: 2,
  },
  summaryAmount: {
    fontSize: 13,
    fontWeight: "800",
    color: "#DC2626", // Red
  },
  summaryAmountIncome: {
    color: "#00897B", // Teal
  },

  /* üé® [NEW] List Item ki·ªÉu NG√ÇN H√ÄNG - S√°ng, tinh t·∫ø */
  bankListItem: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#FFFFFF",
    borderRadius: 14,
    paddingVertical: 16,
    paddingHorizontal: 14,
    marginBottom: 10,
    borderWidth: 1,
    borderColor: "#B2DFDB",
    shadowColor: "rgba(0,150,136,0.1)",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  
  /* üé® [NEW] Icon Box - Tr√≤n, s√°ng, theo lo·∫°i giao d·ªãch */
  bankIconBox: {
    width: 52,
    height: 52,
    borderRadius: 26,
    alignItems: "center",
    justifyContent: "center",
    marginRight: 14,
    overflow: "hidden",
  },
  bankIconExpense: {
    backgroundColor: "#FFEBEE", // Red light
  },
  bankIconIncome: {
    backgroundColor: "#E0F2F1", // Teal light
  },
  bankIconImage: {
    width: "100%",
    height: "100%",
  },
  bankIconEmoji: {
    fontSize: 28,
  },
  
  /* üé® [NEW] Info Container - Gi·ªØa (Ti√™u ƒë·ªÅ + Ng√†y gi·ªù) */
  bankInfoContainer: {
    flex: 1,
    justifyContent: "center",
    paddingRight: 10,
  },
  bankItemTitle: {
    fontSize: 15,
    fontWeight: "600",
    color: "#111827",
    marginBottom: 6,
    letterSpacing: 0.2,
  },
  bankItemDateTime: {
    fontSize: 12,
    fontWeight: "500",
    color: "#00796B",
  },
  
  /* üé® [NEW] Amount Container - B√™n ph·∫£i (S·ªë ti·ªÅn) */
  bankAmountContainer: {
    alignItems: "flex-end",
    justifyContent: "center",
  },
  bankItemAmount: {
    fontSize: 16,
    fontWeight: "700",
    letterSpacing: 0.3,
  },
  bankAmountExpense: {
    color: "#DC2626",
  },
  bankAmountIncome: {
    color: "#00897B",
  },

  /* üé® [NEW] List Container */
  listContainer: {
    gap: 2,
  },

  /* Floating Button (Gi·ªØ nguy√™n) */
  floatingButton: {
    position: "absolute",
    bottom: 24,
    right: 24,
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: "#00897B",
    alignItems: "center",
    justifyContent: "center",
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 12,
    elevation: 10,
  },
  floatingButtonText: {
    color: "#fff",
    fontSize: 32,
    fontWeight: "700",
    lineHeight: 32,
  },


});